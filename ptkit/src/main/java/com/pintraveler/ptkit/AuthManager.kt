/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ptkit

import android.util.Log
import android.view.View
import android.widget.Toast
import com.google.firebase.auth.AuthResult
import com.pintraveler.ptkit.Observable
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.tasks.await

enum class AuthState { AUTHENTICATED, UNAUTHENTICATED, UNINITIALIZED }
enum class EmailValidaton { INVALID, IN_USE, DIFFERENT_METHOD, VALID }

open class AuthManager: Observable<AuthState>() {
    override val TAG: String = "AuthManager"
    var state: AuthState = AuthState.UNINITIALIZED

    var currentUser: FirebaseUser? = null
        get() = FirebaseAuth.getInstance().currentUser

    override fun getObservableValue(): AuthState { return state }

    fun startAuthListener() {
        Log.d(TAG, "Auth Listener Starting...")
        FirebaseAuth.getInstance().addAuthStateListener { auth ->
            val lastState = state
            if(auth.currentUser != null){
                state = AuthState.AUTHENTICATED
            }
            else {
                state = AuthState.UNAUTHENTICATED
            }
            Log.d(TAG, "Auth Stage Changed from $lastState to $state")
            onModify(lastState, state)
            initialized = true
        }
    }

    fun validateEmail(email: String, completion: (String) -> Unit){
        if(email == "")
            completion("Invalid Email")
        else{
            FirebaseAuth.getInstance().fetchSignInMethodsForEmail(email)
                .addOnSuccessListener {
                    val m = it.signInMethods
                    if(m == null || m.size == 0) completion("")
                    else completion("Email already in use")
                }
                .addOnFailureListener { completion("Invalid Email") }
        }
    }

    suspend fun validateEmail(email: String): EmailValidaton {
        if(email == "")
            return EmailValidaton.INVALID
        lateinit var result: EmailValidaton
        FirebaseAuth.getInstance().fetchSignInMethodsForEmail(email)
        .addOnSuccessListener { result = if(it.signInMethods?.isEmpty() ?: true) EmailValidaton.VALID else EmailValidaton.IN_USE }
        .addOnFailureListener { result = EmailValidaton.INVALID }
            .await()
        return result
    }

    fun login(email: String, password: String, completion: ((String?) -> Unit)? = null){
        if(email == "" || password == ""){
            completion?.invoke("Please fill in email and password")
            return
        }
        FirebaseAuth.getInstance().signInWithEmailAndPassword(email, password)
            .addOnSuccessListener {
                //if(it.)
                completion?.invoke("")
            }
            .addOnFailureListener { completion?.invoke(it.toString()) }
    }
}